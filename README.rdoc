Expect4r is a library that enables a ruby program to 'talk' to routers following a written ruby script.
You talk to routers by connecting to them using ssh or telnet and send exec or config command and collect router output than can be parsed using ruby.

* Connect to routers

   ios = Ios.new_telnet :host=> "hostname", :user=> "username", :pwd => "password"
   ios.login
   
   
   iox = Iox.new_telnet 'host', 'username', 'password'
   iox.login
   
   j = J.new_telnet :host=> '', :user=> 'lab', :pwd => 'lab'
   j.login
   
* Push configurations to routers

   ios.config 'no logging console'
   
   ios.config %{
     interface loopback0
       shutdown
   }
   
   
   iox.config
   iox.exp_send 'interface GigabitEthernet0/2/0/0'
   iox.exp_send 'desc to switch port 13'
   iox.exp_send 'ipv4 address 190.0.0.9 255.255.255.252'
   iox.exp_send 'no shut'
   iox.commit
   
   
   j.config %{
     edit logical-router Orleans protocols bgp
       edit group session-to-200
         set type external
         set peer-as 200
         set neighbor 40.0.2.1 peer-as 200
   }

* exec commands


    j.exec 'set cli screen-length 0'

    iox.exec "terminal len 0\nterminal width 0"


* exec shell commands

    iox.shell 'pidin'


* interact with CLI.


   irb> r.interact

   #
   # ^Z to terminate.
   #

   router#clear line 2
   [confirm]
    [OK]
   router# ^Z
   => nil
   irb> 


   irb(main):210:0* j.interact
   
   #
   # ^Z to terminate.
   #
   
   jme@router> configure 
   Entering configuration mode
   The configuration has been changed but not committed
   
   [edit]
   jme@router# rollback 
   load complete
   
   [edit]
   jme@router# show | compare 
   
   [edit]
   jme@router# ^Z
   => nil
   irb(main):211:0> 
   
* Parsing output

   The output is returned as an array of arrays of responses to commands.
   Each response is returned as an array of lines. 
   Parsing a response becomes a matter of iterating an array using the 
   Arrays's enumerator methods such as find, find_all ...

   irb(main):025:0> output = ts.exec %{
   irb(main):026:0" show terminal | include History
   irb(main):027:0" show line | include AUX
   irb(main):028:0" }
   => [
        ["show terminal | include History", "History is enabled, history size is 10.", "PEA#"], 
        ["show line | include AUX", "    17 AUX   9600/9600  -           0/0       -", "PEA#"]
      ]
   
   output[0] contains output for 1st command 'show terminal'.
   output[1] contains output for 1st command 'show line'.
    ...
   output[n-1] contains output for nth command.













